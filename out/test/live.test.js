// Generated by CoffeeScript 1.3.1
(function() {
  var Backbone, ajaxyModel, assert, describe, joe, models, modelsObject, pokemonModel, queryEngine, today, tomorrow, yesterday;

  queryEngine = (typeof require === "function" ? require(__dirname + '/../lib/query-engine.js') : void 0) || this.queryEngine;

  assert = (typeof require === "function" ? require('assert') : void 0) || this.assert;

  Backbone = (typeof require === "function" ? require('backbone') : void 0) || this.Backbone;

  joe = require('joe') || this.joe;

  describe = joe.describe;

  today = new Date();

  today.setHours(0);

  today.setMinutes(0);

  today.setSeconds(0);

  tomorrow = new Date();

  tomorrow.setDate(today.getDate() + 1);

  yesterday = new Date();

  yesterday.setDate(today.getDate() - 1);

  modelsObject = {
    index: {
      id: 'index',
      title: 'Index Page',
      content: 'this is the index page',
      tags: [],
      position: 1,
      category: 1,
      date: today
    },
    jquery: {
      id: 'jquery',
      title: 'jQuery',
      content: 'this is about jQuery',
      tags: ['jquery'],
      position: 2,
      category: 1,
      date: yesterday
    },
    history: {
      id: 'history',
      title: 'History.js',
      content: 'this is about History.js',
      tags: ['jquery', 'html5', 'history'],
      position: 3,
      category: 1,
      date: tomorrow
    },
    docpad: {
      id: 'docpad',
      title: 'DocPad',
      content: 'this is about DocPad',
      tags: ['nodejs'],
      position: 1,
      category: 2,
      date: today
    }
  };

  models = queryEngine.toArray(modelsObject);

  ajaxyModel = {
    id: 'ajaxy',
    title: 'jQuery Ajaxy',
    content: 'this is about jQuery Ajaxy',
    tags: ['jquery'],
    position: 4,
    category: 1,
    date: yesterday
  };

  pokemonModel = {
    id: 'pokemon',
    title: 'Pokemon',
    content: 'Gotta catch em all',
    tags: ['anime'],
    position: 4,
    category: 1,
    date: yesterday
  };

  describe('live', function() {
    describe('queries', function() {
      it('should only keep jquery related models', function() {
        var actual, expected, liveCollection;
        liveCollection = queryEngine.createLiveCollection().setQuery('only jquery related', {
          tags: {
            $has: ['jquery']
          }
        }).add(models);
        actual = liveCollection.toJSON();
        expected = [modelsObject.jquery, modelsObject.history];
        return assert.deepEqual(actual, expected);
      });
      it('should support searching', function() {
        var actual, expected, liveCollection;
        liveCollection = queryEngine.createLiveCollection().setFilter('search', function(model, searchString) {
          var pass, searchRegex;
          searchRegex = queryEngine.createSafeRegex(searchString);
          pass = searchRegex.test(model.get('title')) || searchRegex.test(model.get('content'));
          return pass;
        }).setSearchString('about').add(models);
        actual = liveCollection.toJSON();
        expected = [modelsObject.jquery, modelsObject.history, modelsObject.docpad];
        return assert.deepEqual(actual, expected);
      });
      it('should support pill searches', function() {
        var actual, expected, liveCollection;
        liveCollection = queryEngine.createLiveCollection().setPill('id', {
          prefixes: ['id:', '#'],
          callback: function(model, value) {
            var pass, pillRegex;
            pillRegex = queryEngine.createSafeRegex(value);
            pass = pillRegex.test(model.get('id'));
            return pass;
          }
        }).setSearchString('id:index').add(models);
        actual = liveCollection.toJSON();
        expected = [modelsObject.index];
        return assert.deepEqual(actual, expected);
      });
      return it('should support pills and searching at the same time', function() {
        var actual, expected, liveCollection;
        liveCollection = queryEngine.createLiveCollection().setFilter('search', function(model, searchString) {
          var pass, searchRegex;
          searchRegex = queryEngine.createSafeRegex(searchString);
          pass = searchRegex.test(model.get('content'));
          return pass;
        }).setPill('category', {
          prefixes: ['category:'],
          callback: function(model, value) {
            var pass, pillRegex;
            pillRegex = queryEngine.createSafeRegex(value);
            pass = pillRegex.test(model.get('category'));
            return pass;
          }
        }).setSearchString('category:1 about').add(models);
        actual = liveCollection.toJSON();
        expected = [modelsObject.jquery, modelsObject.history];
        return assert.deepEqual(actual, expected);
      });
    });
    describe('events', function() {
      var liveCollection;
      liveCollection = queryEngine.createLiveCollection();
      it('when query is called on our liveCollection, it should successfully filter our models', function() {
        var actual, expected;
        liveCollection.add(models).setQuery('only jquery related', {
          tags: {
            $has: ['jquery']
          }
        }).query();
        actual = liveCollection.toJSON();
        expected = [modelsObject.jquery, modelsObject.history];
        return assert.deepEqual(actual, expected);
      });
      it('when a model that passes our rules is added to our liveCollection, it should be added', function() {
        var actual, expected;
        liveCollection.add(ajaxyModel);
        actual = liveCollection.toJSON();
        expected = [modelsObject.jquery, modelsObject.history, ajaxyModel];
        return assert.deepEqual(actual, expected);
      });
      it('when a model that fails our rules is added to our liveCollection, it should NOT be added', function() {
        var actual, expected;
        liveCollection.add(pokemonModel);
        actual = liveCollection.toJSON();
        expected = [modelsObject.jquery, modelsObject.history, ajaxyModel];
        return assert.deepEqual(actual, expected);
      });
      it('when a model is removed from our liveCollection, it should be removed', function() {
        var actual, expected;
        liveCollection.remove(liveCollection.get('history'));
        actual = liveCollection.toJSON();
        expected = [modelsObject.jquery, ajaxyModel];
        return assert.deepEqual(actual, expected);
      });
      it('when a model is changed in our liveCollection (and no longer supports our rules), it should be removed', function() {
        var actual, expected;
        liveCollection.get('jquery').set('tags', []);
        actual = liveCollection.toJSON();
        expected = [ajaxyModel];
        return assert.deepEqual(actual, expected);
      });
      return it('when our liveCollection is reset, it should be empty', function() {
        var actual, expected;
        liveCollection.reset([]);
        actual = liveCollection.toJSON();
        expected = [];
        return assert.deepEqual(actual, expected);
      });
    });
    return describe('parent collections', function() {
      var childCollection, parentCollection;
      parentCollection = queryEngine.createCollection(models);
      childCollection = parentCollection.createLiveChildCollection();
      it('when query is called on our childCollection, it should successfully filter our parentCollection', function() {
        var actual, expected;
        childCollection.setQuery('only jquery related', {
          tags: {
            $has: ['jquery']
          }
        }).query();
        actual = childCollection.toJSON();
        expected = [modelsObject.jquery, modelsObject.history];
        return assert.deepEqual(actual, expected);
      });
      it('when a model that passes our rules is added to the parentCollection, it should be added to the childCollection', function() {
        var actual, expected;
        parentCollection.add(ajaxyModel);
        actual = childCollection.toJSON();
        expected = [modelsObject.jquery, modelsObject.history, ajaxyModel];
        return assert.deepEqual(actual, expected);
      });
      it('when a model that fails our rules is added to the parentCollection, it should NOT be added to the childCollection', function() {
        var actual, expected;
        parentCollection.add(pokemonModel);
        actual = childCollection.toJSON();
        expected = [modelsObject.jquery, modelsObject.history, ajaxyModel];
        return assert.deepEqual(actual, expected);
      });
      it('when a model is removed from our parentCollection, it should be removed from our childCollection', function() {
        var actual, expected;
        parentCollection.remove(parentCollection.get('history'));
        actual = childCollection.toJSON();
        expected = [modelsObject.jquery, ajaxyModel];
        return assert.deepEqual(actual, expected);
      });
      it('when a model is changed from our parentCollection (and no longer supports our rules), it should be removed from our childCollection', function() {
        var actual, expected;
        parentCollection.get('jquery').set('tags', []);
        actual = childCollection.toJSON();
        expected = [ajaxyModel];
        return assert.deepEqual(actual, expected);
      });
      it('when a model is changed from our parentCollection (and now supports our rules), it should be added to our childCollection', function() {
        var actual, expected;
        parentCollection.get('jquery').set('tags', ['jquery']);
        actual = childCollection.toJSON();
        expected = [ajaxyModel, modelsObject.jquery];
        return assert.deepEqual(actual, expected);
      });
      return it('when our parentCollection is reset, our childCollection should be reset too', function() {
        var actual, expected;
        parentCollection.reset([]);
        actual = childCollection.toJSON();
        expected = [];
        return assert.deepEqual(actual, expected);
      });
    });
  });

  null;


}).call(this);
